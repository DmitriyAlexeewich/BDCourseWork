// <auto-generated />
using System;
using DataLayer.DataBaseUpdater.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.DataBaseUpdater.Migrations
{
    [DbContext(typeof(PostgreDbContext))]
    partial class PostgreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Models.Models.Department", b =>
                {
                    b.Property<int>("StoreNumber")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Head")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("head");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("StoreNumber", "Name");

                    b.HasIndex("IsRemoved");

                    b.ToTable("department");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.DepartmentProduct", b =>
                {
                    b.Property<int>("StoreNumber")
                        .HasColumnType("integer")
                        .HasColumnName("storeNumber");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text")
                        .HasColumnName("departmentName");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("productName");

                    b.Property<string>("ProductGrade")
                        .HasColumnType("text")
                        .HasColumnName("productGrade");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("StoreNumber", "DepartmentName", "ProductName", "ProductGrade");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("ProductName", "ProductGrade");

                    b.ToTable("departmentProduct");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.Product", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Grade")
                        .HasColumnType("text")
                        .HasColumnName("grade");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("Name", "Grade");

                    b.HasIndex("IsRemoved");

                    b.ToTable("product");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.WarehouseProduct", b =>
                {
                    b.Property<string>("WarehouseName")
                        .HasColumnType("text")
                        .HasColumnName("warehouseName");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("productName");

                    b.Property<string>("ProductGrade")
                        .HasColumnType("text")
                        .HasColumnName("productGrade");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("WarehouseName", "ProductName", "ProductGrade");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("ProductName", "ProductGrade");

                    b.ToTable("warehouseProduct");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Store", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("class");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("warehouseName");

                    b.HasKey("Number");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("WarehouseName");

                    b.ToTable("store");
                });

            modelBuilder.Entity("DataLayer.Models.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StoreNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.HasIndex("WarehouseName");

                    b.HasIndex("StoreNumber", "DepartmentName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Warehouse", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("Name");

                    b.HasIndex("IsRemoved");

                    b.ToTable("warehouse");
                });

            modelBuilder.Entity("DataLayer.Models.Rules.PriceRule", b =>
                {
                    b.Property<string>("StoreClass")
                        .HasColumnType("text")
                        .HasColumnName("storeClass");

                    b.Property<string>("ProductGrade")
                        .HasColumnType("text")
                        .HasColumnName("productGrade");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startDate");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("endDate");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_removed");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.HasKey("StoreClass", "ProductGrade", "StartDate");

                    b.HasIndex("IsRemoved");

                    b.ToTable("priceRule");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Department", b =>
                {
                    b.HasOne("DataLayer.Models.Models.Store", "Store")
                        .WithMany("Departments")
                        .HasForeignKey("StoreNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.DepartmentProduct", b =>
                {
                    b.HasOne("DataLayer.Models.Models.Products.Product", "Product")
                        .WithMany("DepartmentProducts")
                        .HasForeignKey("ProductName", "ProductGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Models.Department", "Department")
                        .WithMany("DepartmentProducts")
                        .HasForeignKey("StoreNumber", "DepartmentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.WarehouseProduct", b =>
                {
                    b.HasOne("DataLayer.Models.Models.Warehouse", "Warehouse")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Models.Models.Products.Product", "Product")
                        .WithMany("WarehouseProducts")
                        .HasForeignKey("ProductName", "ProductGrade")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Store", b =>
                {
                    b.HasOne("DataLayer.Models.Models.Warehouse", "Warehouse")
                        .WithMany("Stores")
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DataLayer.Models.Models.User", b =>
                {
                    b.HasOne("DataLayer.Models.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreNumber")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Models.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DataLayer.Models.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("StoreNumber", "DepartmentName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Department");

                    b.Navigation("Store");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Department", b =>
                {
                    b.Navigation("DepartmentProducts");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Products.Product", b =>
                {
                    b.Navigation("DepartmentProducts");

                    b.Navigation("WarehouseProducts");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Store", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("DataLayer.Models.Models.Warehouse", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("WarehouseProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
